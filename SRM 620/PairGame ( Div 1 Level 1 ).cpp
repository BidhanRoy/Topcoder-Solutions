/*
 * Bidhan Roy
 * University of Dhaka
 */

using namespace std;
#include <bits/stdc++.h>

#define foreach(i,n) for(__typeof((n).begin())i =(n).begin();i!=(n).end();i++)
#define sgn(x,y) ((x)+eps<(y)?-1:((x)>eps+(y)?1:0))
#define rep(i,n) for(__typeof(n) i=0; i<(n); i++)
#define mem(x,val) memset((x),(val),sizeof(x));
#define rite(x) freopen(x,"w",stdout);
#define read(x) freopen(x,"r",stdin);
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define sqr(x) ((x)*(x))
#define pb push_back
#define mp make_pair
#define clr clear()
#define inf (1<<30)
#define ins insert
#define xx first
#define yy second
#define eps 1e-9

typedef long long i64;
typedef unsigned long long ui64;
typedef string st;
typedef vector<int> vi;
typedef vector<st> vs;
typedef map<int,int> mii;
typedef map<st,int> msi;
typedef set<int> si;
typedef set<st> ss;
typedef pair<int,int> pii;
typedef vector<pii> vpii;

#define mx 0

class PairGame {
public:
	void call(set<pii> &ase,int x,int y){
		while(true){
			ase.ins(pii(x,y));
			if(x>y) x-=y;
			else if(y>x) y-=x;
			else break;
		}
	}
	int maxSum(int a, int b, int c, int d) {
		set< pii > sa1, sa2;
		call( sa1 , a , b );
		call( sa2 , c , d );
		int ret = -1;
		foreach(it,sa1){
			if(sa2.find(*it)!=sa2.end())
				ret = max( ret , it->xx+it->yy );
		}
		return ret;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	PairGame *obj;
	int answer;
	obj = new PairGame();
	clock_t startTime = clock();
	answer = obj->maxSum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 2;
	p3 = 1;
	p4 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 15;
	p1 = 4;
	p2 = 10;
	p3 = 7;
	p4 = 7;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 1;
	p2 = 10;
	p3 = 10;
	p4 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000;
	p1 = 1001;
	p2 = 2000;
	p3 = 2001;
	p4 = 1001;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10944;
	p1 = 17928;
	p2 = 7704;
	p3 = 21888;
	p4 = 144;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 1;
	p4 = 2;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In this problem we consider ordered pairs of positive integers. Given such a pair, you can now make zero or more steps.
// In each step, you can change your pair into a new pair of integers by adding one of them to the other.
// That is, if your current pair is (x, y), then your next pair will be either (x+y, y), or (x, x+y).
// 
// 
// 
// For example, you can start with (1, 2), change it to (3, 2), change that to (3, 5), and then change that again to (3, 8).
// 
// 
// 
// You are given four ints: a, b, c, and d.
// We are looking for a pair (x, y) such that:
// 
// It is possible to start with (x, y) and end with (a, b).
// It is also possible to start with the same (x, y) and end with (c, d).
// 
// The number of steps needed to reach (a, b) may be different from the number of steps needed to reach (c, d).
// 
// 
// 
// If there is at least one such pair (x, y), return the largest possible value of x+y.
// Otherwise, return -1.
// 
// DEFINITION
// Class:PairGame
// Method:maxSum
// Parameters:int, int, int, int
// Returns:int
// Method signature:int maxSum(int a, int b, int c, int d)
// 
// 
// CONSTRAINTS
// -a will be between 1 and 1,000,000, inclusive.
// -b will be between 1 and 1,000,000, inclusive.
// -c will be between 1 and 1,000,000, inclusive.
// -d will be between 1 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 2
// 2
// 1
// 
// Returns: 2
// 
// We have (1,1) -> (1,2) and (1,1) -> (2,1).
// 
// 
// 1)
// 15
// 4
// 10
// 7
// 
// Returns: 7
// 
// Now we have (3,4) -> (7,4) -> (11,4) -> (15,4) and (3,4) -> (3,7) -> (10,7).
// 
// 2)
// 1
// 1
// 10
// 10
// 
// Returns: -1
// 
// 
// 
// 3)
// 1000
// 1001
// 2000
// 2001
// 
// Returns: 1001
// 
// 
// 
// 4)
// 10944
// 17928
// 7704
// 21888
// 
// Returns: 144
// 
// 
// 
// 5)
// 1
// 1
// 1
// 1
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
