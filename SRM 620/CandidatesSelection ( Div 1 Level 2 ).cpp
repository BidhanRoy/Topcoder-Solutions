/*
 * Bidhan Roy
 * University of Dhaka
 */

using namespace std;
#include <bits/stdc++.h>

#define foreach(i,n) for(__typeof((n).begin())i =(n).begin();i!=(n).end();i++)
#define sgn(x,y) ((x)+eps<(y)?-1:((x)>eps+(y)?1:0))
#define rep(i,n) for(__typeof(n) i=0; i<(n); i++)
#define mem(x,val) memset((x),(val),sizeof(x));
#define rite(x) freopen(x,"w",stdout);
#define read(x) freopen(x,"r",stdin);
#define all(x) x.begin(),x.end()
#define sz(x) ((int)x.size())
#define sqr(x) ((x)*(x))
#define pb push_back
#define mp make_pair
#define clr clear()
#define inf (1<<30)
#define ins insert
#define xx first
#define yy second
#define eps 1e-9

typedef long long i64;
typedef unsigned long long ui64;
typedef string st;
typedef vector<int> vi;
typedef vector<st> vs;
typedef map<int,int> mii;
typedef map<st,int> msi;
typedef set<int> si;
typedef set<st> ss;
typedef pair<int,int> pii;
typedef vector<pii> vpii;

#define mx 0

class CandidatesSelection {
public:
	vs lev;
	bool canTake(vpii &vec,int skill){
		for(pii x:vec)
			
			if(lev[x.xx][skill]>lev[x.yy][skill]) return false;
		return true;
	}
	string possible(vector <string> score, vector <int> result) {
		lev = score;
		vpii vec;
		int n = sz(score);
		int m = sz(score[0]);
		rep(i,n-1) vec.pb( pii(result[i],result[i+1]) );
		vector<bool> used(m,0);
		while(true){
			bool ent = false;
			rep(j,m){
				if(used[j]) continue;
				if(!canTake(vec,j)) continue;
				used[j]=true;
				ent = true;
				stack<int> st;
				rep(i,sz(vec)) {
					if(score[vec[i].xx][j] < score[vec[i].yy][j]) st.push(i);
				}
				while(!st.empty()){
					vec.erase( vec.begin()+st.top() );
					st.pop();
				}
			}
			if(!ent) break;
		}
		rep(i,sz(vec)) if(vec[i].xx>vec[i].yy) return "Impossible";
		return "Possible";		
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CandidatesSelection *obj;
	string answer;
	obj = new CandidatesSelection();
	clock_t startTime = clock();
	answer = obj->possible(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"CC","AA","BB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BAB","ABB","AAB","ABA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0,1,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"BAB","ABB","AAB","ABA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAA","ZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ZZZ","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"ZYYYYX","YXZYXY","ZZZZXX","XZXYYX","ZZZYYZ","ZZXXYZ","ZYZZXZ","XZYYZX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,7,1,0,2,5,6,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel wants to hire a new maid.
// There are n candidates for the position.
// There are m different skills a maid should have, such as cooking, cleaning, or discreetness.
// Ciel numbered the candidates 0 through n-1 and the skills 0 through m-1.
// 
// 
// 
// Ciel evaluated the level each candidate has in each of the skills.
// You are given this information encoded in a vector <string> score with n elements, each consisting of m characters.
// For each i and j, the character score[i][j] represents the level candidate i has in skill j.
// Said character will always be between 'A' and 'Z', inclusive, where 'A' means the best possible and 'Z' the worst possible candidate.
// 
// 
// 
// Immediately after the reviews, the order of the candidates was {0, 1, ..., n-1}.
// Then, Ciel spent several days thinking about whom to hire.
// On each day, she chose one skill and reordered the candidates according to their level in that skill, from the best to the worst one.
// Whenever two candidates had the same level in the currently considered skill, she kept them in the order in which they were after the previous day.
// (Formally, the sorting algorithm she used was stable.)
// 
// 
// 
// You are given a vector <int> result containing a permutation of 0 through n-1.
// Return "Possible" (quotes for clarity) if it is possible that after zero or more days the order of candidates was precisely the one given in result.
// Otherwise, return "Impossible".
// 
// DEFINITION
// Class:CandidatesSelection
// Method:possible
// Parameters:vector <string>, vector <int>
// Returns:string
// Method signature:string possible(vector <string> score, vector <int> result)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -m will be between 1 and 50, inclusive.
// -score will contain exactly n elements.
// -Each element of score will contain exactly m characters.
// -Each character in each element of score will be an uppercase English letter ('A'-'Z').
// -result will be a permutation of 0 through n-1.
// 
// 
// EXAMPLES
// 
// 0)
// {"CC", "AA", "BB"}
// {1,2,0}
// 
// Returns: "Possible"
// 
// You can sort them by any skill to get the result.
// 
// 1)
// {"BAB", "ABB", "AAB", "ABA"}
// {2,0,1,3}
// 
// Returns: "Possible"
// 
// We can first sort them by skill 0 to get {1, 2, 3, 0}, then sort them by skill 1 to get {2, 0, 1, 3}.
// 
// 2)
// {"BAB", "ABB", "AAB", "ABA"}
// {0, 1, 3, 2}
// 
// Returns: "Impossible"
// 
// 
// 
// 3)
// {"AAA", "ZZZ"}
// {1, 0}
// 
// Returns: "Impossible"
// 
// 
// 
// 4)
// {"ZZZ", "AAA"}
// {0, 1}
// 
// Returns: "Possible"
// 
// Ciel can do no operation at all.
// 
// 5)
// {"ZYYYYX","YXZYXY","ZZZZXX","XZXYYX","ZZZYYZ","ZZXXYZ","ZYZZXZ","XZYYZX"}
// {3,7,1,0,2,5,6,4}
// 
// Returns: "Possible"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
